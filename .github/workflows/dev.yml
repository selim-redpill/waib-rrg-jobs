# This workflow will build a docker container, publish it to Google Container Registry, and deploy it to GKE when there is a push to the "main" branch.
#
# To configure this workflow:
#
# 1. Ensure that your repository contains the necessary configuration for your Google Kubernetes Engine cluster, including deployment.yml, kustomization.yml, service.yml, etc.
#
# 2. Create and configure a Workload Identity Provider for GitHub (https://github.com/google-github-actions/auth#setting-up-workload-identity-federation)
#
# 3. Change the values for the GAR_LOCATION, GKE_ZONE, GKE_CLUSTER, IMAGE, REPOSITORY and DEPLOYMENT_NAME environment variables (below).
#
# For more support on how to run the workflow, please visit https://github.com/google-github-actions/setup-gcloud/tree/master/example-workflows/gke-kustomize

name: Build and Deploy to GKE

on:
  push:
    branches: [ "develop" ]

env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GAR_LOCATION: europe-west1
  GKE_CLUSTER: alice-setup-dev
  GKE_ZONE: europe-west1-b   # TODO: update to cluster zone
  #DEPLOYMENT_NAME: gke-test # TODO: update to deployment name
  REPOSITORY: waib-rrg-jobs # TODO: update to Artifact Registry docker repository
  IMAGE: waib-rrg-jobs-dev

jobs:
  setup-build-publish-deploy:

    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: test

    permissions:
      contents: 'read'
      id-token: 'write'

    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - id: 'auth'
      uses: 'google-github-actions/auth@v2'
      with:
        token_format: 'access_token'
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Docker configuration
      uses: docker/login-action@v3
      with:
        registry: ${{env.GAR_LOCATION}}-docker.pkg.dev
        username: oauth2accesstoken
        password: ${{steps.auth.outputs.access_token}}

    # - name: Docker configuration
    #   run: |-
    #     echo ${{steps.auth.outputs.access_token}} | docker login -u oauth2accesstoken --password-stdin https://$GAR_LOCATION-docker.pkg.dev
    # Get the GKE credentials so we can deploy to the cluster
    - name: Set up GKE credentials
      uses: google-github-actions/get-gke-credentials@v2
      with:
        cluster_name: ${{ env.GKE_CLUSTER }}
        location: ${{ env.GKE_ZONE }}
    # Build the Docker image
    - name: Build
      run: |-
        docker build \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA" \
          --tag "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .
    # Push the Docker image to Google Artifact Registry
    - name: Publish
      run: |-
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:$GITHUB_SHA"
        docker push "$GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/$IMAGE:latest"

    - name: Setup env
      uses: mikefarah/yq@master
      env: # Or as an environment variable
        DEV_VARS: ${{ vars.DEV_VARS }}
        DEV_SECRETS: ${{ secrets.DEV_SECRETS }}

      with:
        cmd: |-
          yq -i '.data.ENV = test' k8s/env.yaml
          yq -i '.spec.template.spec.containers[0].image = ("\(env(GAR_LOCATION))-docker.pkg.dev/\(env(PROJECT_ID))/\(env(REPOSITORY))/\(env(IMAGE)):\(env(GITHUB_SHA))")' k8s/deployment.yaml
          yq -i '.data = env(DEV_SECRETS)' k8s/secret.yaml
          yq -i '.data = env(DEV_VARS)' k8s/env.yaml
          yq -i '.data = (.data | map_values(. | @base64))' k8s/secret.yaml
    # Deploy the Docker image to the GKE cluster
    - name: Deploy
      run: |-
        # replacing the image name in the k8s template
        kubectl apply -f k8s/env.yaml
        kubectl apply -f k8s/secret.yaml
        kubectl apply -f k8s/deployment.yaml
        kubectl apply -f k8s/service.yaml